generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  formTemplates FormTemplate[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  token     String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime
  updatedAt DateTime

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model FormTemplate {
  id        String              @id @default(nanoid())
  userId    String
  user      User                @relation(references: [id], fields: [userId], onDelete: Cascade)
  title     String
  slug      String              @unique
  details   String?
  published Boolean             @default(false)
  hidden    Boolean             @default(false)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  fields    FormTemplateField[]

  @@map("form_template")
}

model FormTemplateField {
  id           String                @id @default(nanoid())
  templateId   String
  formTemplate FormTemplate          @relation(references: [id], fields: [templateId], onDelete: Cascade)
  order        Int
  label        String
  required     Boolean
  type         FormTemplateFieldType
  description  String?
  placeholder  String?
  min          Int?
  max          Int?

  @@map("form_template_field")
}

enum FormTemplateFieldType {
  text
  textarea
  email
  number
}
